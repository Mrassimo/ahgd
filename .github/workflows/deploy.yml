name: Deploy

on:
  push:
    branches: 
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHONPATH: ${{ github.workspace }}/src
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Build application
      run: |
        uv sync --all-groups
        uv build
        
    - name: Create deployment package
      run: |
        mkdir -p dist/deployment
        cp -r src/ dist/deployment/
        cp -r scripts/ dist/deployment/
        cp pyproject.toml uv.lock dist/deployment/
        cp README.md dist/deployment/
        
        # Create deployment scripts
        cat > dist/deployment/start.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting AHGD Health Analytics Dashboard..."
        
        # Set environment variables
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        export AHGD_ENV="${AHGD_ENV:-production}"
        
        # Start the dashboard
        if [ "$AHGD_ENV" = "production" ]; then
            uv run streamlit run src/dashboard/app.py --server.port=8501 --server.address=0.0.0.0 --server.headless=true
        else
            uv run streamlit run src/dashboard/app.py --server.port=8501
        fi
        EOF
        
        chmod +x dist/deployment/start.sh
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            curl \
            && rm -rf /var/lib/apt/lists/*
            
        # Install uv
        RUN pip install uv
        
        # Set working directory
        WORKDIR /app
        
        # Copy deployment files
        COPY dist/deployment/ ./
        
        # Install Python dependencies
        RUN uv sync --system
        
        # Create non-root user
        RUN useradd --create-home --shell /bin/bash app
        RUN chown -R app:app /app
        USER app
        
        # Expose port
        EXPOSE 8501
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8501/_stcore/health || exit 1
            
        # Start application
        CMD ["./start.sh"]
        EOF
        
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image
      id: image
      run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT
      
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: dist/deployment/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: 
      name: staging
      url: https://ahgd-staging.example.com
      
    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        echo "Image: ${{ needs.build.outputs.image }}"
        echo "Digest: ${{ needs.build.outputs.digest }}"
        
        # Here you would typically:
        # 1. Deploy to your staging infrastructure (AWS ECS, Azure Container Instances, etc.)
        # 2. Update environment variables
        # 3. Run database migrations if needed
        # 4. Perform health checks
        
        # Example for AWS ECS (uncomment and configure):
        # aws ecs update-service --cluster staging --service ahgd-staging --force-new-deployment
        
        # Example for Docker Compose (uncomment and configure):
        # docker-compose -f docker-compose.staging.yml up -d
        
        echo "✅ Staging deployment completed"
        
    - name: Run deployment tests
      run: |
        echo "🧪 Running deployment verification tests"
        
        # Wait for service to be ready
        sleep 30
        
        # Basic health check (replace with your staging URL)
        # curl -f https://ahgd-staging.example.com/_stcore/health || exit 1
        
        echo "✅ Deployment tests passed"
        
    - name: Notify deployment
      run: |
        echo "## 🚀 Staging Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- Image: ${{ needs.build.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ✅ Successful" >> $GITHUB_STEP_SUMMARY
        echo "- URL: https://ahgd-staging.example.com" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: 
      name: production
      url: https://ahgd.example.com
      
    steps:
    - name: Validate production readiness
      run: |
        echo "🔍 Validating production readiness"
        
        # Check if this is a tagged release
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "✅ Tagged release detected: ${{ github.ref }}"
        elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "⚠️ Manual production deployment requested"
        else
          echo "❌ Invalid production deployment trigger"
          exit 1
        fi
        
    - name: Create production deployment
      run: |
        echo "🚀 Deploying to production environment"
        echo "Image: ${{ needs.build.outputs.image }}"
        echo "Digest: ${{ needs.build.outputs.digest }}"
        
        # Production deployment steps:
        # 1. Blue-green deployment or rolling update
        # 2. Database migrations with rollback plan
        # 3. Configuration updates
        # 4. Load balancer updates
        # 5. Comprehensive health checks
        
        # Example for AWS ECS (uncomment and configure):
        # aws ecs update-service --cluster production --service ahgd-production --force-new-deployment
        
        # Example for Kubernetes (uncomment and configure):
        # kubectl set image deployment/ahgd-production ahgd=${{ needs.build.outputs.image }}
        # kubectl rollout status deployment/ahgd-production
        
        echo "✅ Production deployment completed"
        
    - name: Production health checks
      run: |
        echo "🏥 Running production health checks"
        
        # Comprehensive health checks
        sleep 60  # Allow time for service to fully start
        
        # Database connectivity test
        # python scripts/health_check.py --database
        
        # API endpoint tests
        # curl -f https://ahgd.example.com/_stcore/health || exit 1
        
        # Performance baseline check
        # python scripts/performance_check.py --baseline
        
        echo "✅ Production health checks passed"
        
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## What's Changed
          
          This release includes:
          - Health analytics dashboard improvements
          - Performance optimisations
          - Security updates
          - Bug fixes
          
          ## Deployment Information
          - Docker Image: ${{ needs.build.outputs.image }}
          - Digest: ${{ needs.build.outputs.digest }}
          - Deployed to: Production
          
          ## Full Changelog
          See the commit history for detailed changes.
        draft: false
        prerelease: false
        
    - name: Notify successful deployment
      run: |
        echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
        echo "- Image: ${{ needs.build.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ✅ Successful" >> $GITHUB_STEP_SUMMARY
        echo "- URL: https://ahgd.example.com" >> $GITHUB_STEP_SUMMARY
        echo "- Release: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback Procedure
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      
    steps:
    - name: Initiate rollback
      run: |
        echo "🔄 Initiating rollback procedure"
        
        # Get previous successful deployment
        # PREVIOUS_IMAGE=$(get_previous_deployment_image)
        
        # Rollback steps:
        # 1. Revert to previous container image
        # 2. Restore database if needed
        # 3. Update load balancer configuration
        # 4. Verify rollback success
        
        echo "✅ Rollback completed"
        
    - name: Notify rollback
      run: |
        echo "## 🔄 Rollback Executed" >> $GITHUB_STEP_SUMMARY
        echo "- Reason: Deployment failure detected" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ✅ Rollback successful" >> $GITHUB_STEP_SUMMARY
        echo "- Action Required: Investigate deployment failure" >> $GITHUB_STEP_SUMMARY