name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          # Check if it's a pre-release based on version pattern
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "## Release Information" >> $GITHUB_STEP_SUMMARY
        echo "- Version: $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- Pre-release: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+([.-](alpha|beta|rc)[0-9]*)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-alpha/beta/rc[N]"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
        
    - name: Check if tag exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "❌ Tag v$VERSION already exists"
          exit 1
        fi
        echo "✅ Tag v$VERSION is available"

  run-tests:
    name: Run Full Test Suite
    needs: validate-release
    uses: ./.github/workflows/test.yml
    
  run-quality-checks:
    name: Run Quality Checks
    needs: validate-release
    uses: ./.github/workflows/quality.yml

  build-release:
    name: Build Release Assets
    needs: [validate-release, run-tests, run-quality-checks]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install dependencies
      run: uv sync --all-groups
      
    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        
    - name: Build package
      run: |
        uv build
        
    - name: Create source distribution
      run: |
        mkdir -p dist/release
        
        # Create comprehensive source package
        tar -czf "dist/release/ahgd-${{ needs.validate-release.outputs.version }}-source.tar.gz" \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='htmlcov' \
          --exclude='data/raw' \
          --exclude='health_analytics.db' \
          --exclude='logs' \
          .
          
    - name: Create documentation package
      run: |
        mkdir -p temp-docs
        cp -r docs/ temp-docs/
        cp README.md temp-docs/
        tar -czf "dist/release/ahgd-${{ needs.validate-release.outputs.version }}-docs.tar.gz" -C temp-docs .
        
    - name: Create deployment package
      run: |
        mkdir -p dist/deployment
        
        # Core application files
        cp -r src/ dist/deployment/
        cp -r scripts/ dist/deployment/
        cp pyproject.toml uv.lock dist/deployment/
        cp README.md dist/deployment/
        
        # Deployment scripts
        cat > dist/deployment/docker-compose.yml << 'EOF'
        version: '3.8'
        services:
          ahgd:
            image: ghcr.io/your-org/ahgd:${{ needs.validate-release.outputs.version }}
            ports:
              - "8501:8501"
            environment:
              - AHGD_ENV=production
              - PYTHONPATH=/app/src
            volumes:
              - ./data:/app/data
              - ./logs:/app/logs
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        EOF
        
        cat > dist/deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Deploying AHGD Health Analytics v${{ needs.validate-release.outputs.version }}"
        
        # Create necessary directories
        mkdir -p data logs
        
        # Pull latest image
        docker-compose pull
        
        # Start services
        docker-compose up -d
        
        # Wait for health check
        echo "Waiting for service to be healthy..."
        timeout 120s bash -c 'until curl -f http://localhost:8501/_stcore/health; do sleep 5; done'
        
        echo "✅ Deployment successful!"
        echo "🌐 Dashboard available at: http://localhost:8501"
        EOF
        
        chmod +x dist/deployment/deploy.sh
        
        tar -czf "dist/release/ahgd-${{ needs.validate-release.outputs.version }}-deployment.tar.gz" -C dist/deployment .
        
    - name: Generate checksums
      run: |
        cd dist/release
        sha256sum * > checksums.txt
        
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: dist/release/
        retention-days: 90

  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: dist/release/
        
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        cat > release_notes.md << EOF
        ## 🚀 What's New in v$VERSION
        
        ### 📊 Health Analytics Features
        - Enhanced health correlation analysis
        - Improved geographic mapping capabilities
        - Updated Australian health data integration
        - Performance optimisations for large datasets
        
        ### 🛠️ Technical Improvements
        - Updated dependencies for security and performance
        - Enhanced CI/CD pipeline with comprehensive testing
        - Improved error handling and logging
        - Better documentation and user guides
        
        ### 🐛 Bug Fixes
        - Fixed data processing edge cases
        - Resolved dashboard responsiveness issues
        - Improved memory management for large datasets
        - Enhanced error messaging
        
        ### 📈 Performance
        - Faster data loading and processing
        - Optimised visualisation rendering
        - Reduced memory footprint
        - Better caching mechanisms
        
        ### 🔧 Development
        - Enhanced testing coverage
        - Improved development environment setup
        - Better debugging tools
        - Updated documentation
        
        EOF
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### 📝 Full Changelog" >> release_notes.md
          echo "" >> release_notes.md
          git log --oneline --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        cat >> release_notes.md << EOF
        
        ## 📦 Installation
        
        ### Quick Start
        \`\`\`bash
        # Download and extract
        wget https://github.com/your-org/ahgd/releases/download/v$VERSION/ahgd-$VERSION-deployment.tar.gz
        tar -xzf ahgd-$VERSION-deployment.tar.gz
        
        # Deploy with Docker
        ./deploy.sh
        \`\`\`
        
        ### Docker
        \`\`\`bash
        docker run -p 8501:8501 ghcr.io/your-org/ahgd:$VERSION
        \`\`\`
        
        ### From Source
        \`\`\`bash
        git clone https://github.com/your-org/ahgd.git
        cd ahgd
        git checkout v$VERSION
        uv sync --all-groups
        uv run streamlit run src/dashboard/app.py
        \`\`\`
        
        ## 🔐 Verification
        
        All release assets are signed and checksums are provided in \`checksums.txt\`.
        
        ## 🆘 Support
        
        - 📚 Documentation: https://your-org.github.io/ahgd/
        - 🐛 Issues: https://github.com/your-org/ahgd/issues
        - 💬 Discussions: https://github.com/your-org/ahgd/discussions
        
        ---
        
        **Full Changelog**: https://github.com/your-org/ahgd/compare/$PREVIOUS_TAG...v$VERSION
        EOF
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        release_name: AHGD Health Analytics v${{ needs.validate-release.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
        
    - name: Upload release assets
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Upload each asset
        for file in dist/release/*; do
          filename=$(basename "$file")
          echo "Uploading $filename..."
          
          # Note: In a real implementation, you would use gh CLI or the upload-release-asset action
          # gh release upload "v$VERSION" "$file"
        done

  post-release:
    name: Post-Release Tasks
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update main branch
      if: needs.validate-release.outputs.is-prerelease == 'false'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Update version in pyproject.toml
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        
        # Update README with new version
        sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-$VERSION/g" README.md
        
        # Commit version updates
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml README.md
        git commit -m "chore: Bump version to $VERSION" || exit 0
        git push origin main
        
    - name: Create next development version
      if: needs.validate-release.outputs.is-prerelease == 'false'
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Calculate next development version
        IFS='.' read -r major minor patch <<< "$VERSION"
        NEXT_VERSION="$major.$((minor + 1)).0-dev"
        
        # Update to development version
        sed -i "s/version = \".*\"/version = \"$NEXT_VERSION\"/" pyproject.toml
        
        # Commit development version
        git add pyproject.toml
        git commit -m "chore: Bump to development version $NEXT_VERSION"
        git push origin main
        
    - name: Trigger deployment
      if: needs.validate-release.outputs.is-prerelease == 'false'
      run: |
        # Trigger production deployment workflow
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy.yml/dispatches \
          -d '{"ref":"v${{ needs.validate-release.outputs.version }}","inputs":{"environment":"production"}}'
        
    - name: Notify release completion
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        echo "## 🎉 Release v$VERSION Complete" >> $GITHUB_STEP_SUMMARY
        echo "- Release created: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Assets uploaded: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation updated: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Production deployment triggered: ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Release URL**: https://github.com/${{ github.repository }}/releases/tag/v$VERSION" >> $GITHUB_STEP_SUMMARY
        echo "🐳 **Docker Image**: ghcr.io/${{ github.repository }}:$VERSION" >> $GITHUB_STEP_SUMMARY