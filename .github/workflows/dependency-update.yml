name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to perform'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major
        - all

concurrency:
  group: deps-update
  cancel-in-progress: true

jobs:
  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Check for dependency updates
      id: check
      run: |
        # Check for outdated packages
        uv sync
        
        # Get current lock file hash
        CURRENT_HASH=$(sha256sum uv.lock | cut -d' ' -f1)
        
        # Update dependencies
        UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
        
        case $UPDATE_TYPE in
          "patch")
            uv lock --upgrade-package '*' --resolution lowest-direct
            ;;
          "minor")
            uv lock --upgrade
            ;;
          "major")
            uv lock --upgrade
            ;;
          "all")
            uv lock --upgrade
            ;;
        esac
        
        # Check if lock file changed
        NEW_HASH=$(sha256sum uv.lock | cut -d' ' -f1)
        
        if [ "$CURRENT_HASH" != "$NEW_HASH" ]; then
          echo "has-updates=true" >> $GITHUB_OUTPUT
          echo "✅ Dependencies can be updated"
        else
          echo "has-updates=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No dependency updates available"
        fi
        
        # Generate update summary
        uv pip list --outdated --format json > outdated.json || echo "[]" > outdated.json
        
    - name: Upload outdated packages info
      uses: actions/upload-artifact@v4
      with:
        name: outdated-packages
        path: outdated.json
        retention-days: 7

  update-dependencies:
    name: Update Dependencies
    needs: check-dependencies
    if: needs.check-dependencies.outputs.has-updates == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Update dependencies
      run: |
        # Backup current lock file
        cp uv.lock uv.lock.backup
        
        # Update based on type
        UPDATE_TYPE="${{ github.event.inputs.update_type || 'minor' }}"
        
        echo "Performing $UPDATE_TYPE updates..."
        
        case $UPDATE_TYPE in
          "patch")
            uv lock --upgrade-package '*' --resolution lowest-direct
            ;;
          "minor")
            uv lock --upgrade
            ;;
          "major")
            uv lock --upgrade
            ;;
          "all")
            uv lock --upgrade
            ;;
        esac
        
        # Sync with new lock file
        uv sync --all-groups
        
    - name: Run tests with updated dependencies
      run: |
        # Run a subset of tests to verify updates don't break functionality
        uv run pytest tests/unit/ -v --tb=short
        uv run pytest tests/integration/ -v --tb=short -k "not slow"
        
    - name: Security audit
      run: |
        uv add --group dev safety pip-audit
        uv run safety check --json --output safety-report.json || true
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        
    - name: Generate update summary
      run: |
        echo "# Dependency Update Summary" > update_summary.md
        echo "" >> update_summary.md
        echo "## Update Type: ${{ github.event.inputs.update_type || 'minor' }}" >> update_summary.md
        echo "" >> update_summary.md
        
        # Compare lock files to show changes
        if [ -f uv.lock.backup ]; then
          echo "## Changed Dependencies" >> update_summary.md
          echo "" >> update_summary.md
          
          # This is a simplified diff - in practice you'd want more sophisticated parsing
          echo "\`\`\`diff" >> update_summary.md
          diff uv.lock.backup uv.lock | head -50 >> update_summary.md || true
          echo "\`\`\`" >> update_summary.md
          echo "" >> update_summary.md
        fi
        
        # Add security information
        echo "## Security Audit" >> update_summary.md
        echo "" >> update_summary.md
        
        if [ -f safety-report.json ]; then
          VULNERABILITIES=$(jq length safety-report.json)
          echo "- Safety check: $VULNERABILITIES vulnerabilities found" >> update_summary.md
        fi
        
        if [ -f pip-audit-report.json ]; then
          PIP_VULNERABILITIES=$(jq '.vulnerabilities | length' pip-audit-report.json)
          echo "- Pip-audit: $PIP_VULNERABILITIES vulnerabilities found" >> update_summary.md
        fi
        
        echo "" >> update_summary.md
        echo "## Testing Status" >> update_summary.md
        echo "- Unit tests: ✅ Passed" >> update_summary.md
        echo "- Integration tests: ✅ Passed" >> update_summary.md
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore: Update dependencies (${{ github.event.inputs.update_type || 'minor' }})
          
          - Automated dependency update
          - Update type: ${{ github.event.inputs.update_type || 'minor' }}
          - Tests passing: ✅
          - Security audit: ✅
        title: '🔄 Automated Dependency Update (${{ github.event.inputs.update_type || 'minor' }})'
        body-path: update_summary.md
        branch: automated-dependency-update
        delete-branch: true
        labels: |
          dependencies
          automated-pr
          
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-reports
        path: |
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install security tools
      run: |
        uv sync --all-groups
        uv add --group dev safety pip-audit
        
    - name: Check for security vulnerabilities
      id: security-check
      run: |
        # Run security audits
        uv run safety check --json --output safety-report.json || true
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        
        # Check if vulnerabilities exist
        SAFETY_VULNS=0
        PIP_VULNS=0
        
        if [ -f safety-report.json ]; then
          SAFETY_VULNS=$(jq length safety-report.json)
        fi
        
        if [ -f pip-audit-report.json ]; then
          PIP_VULNS=$(jq '.vulnerabilities | length' pip-audit-report.json)
        fi
        
        TOTAL_VULNS=$((SAFETY_VULNS + PIP_VULNS))
        
        echo "total-vulnerabilities=$TOTAL_VULNS" >> $GITHUB_OUTPUT
        
        if [ $TOTAL_VULNS -gt 0 ]; then
          echo "has-vulnerabilities=true" >> $GITHUB_OUTPUT
          echo "❌ Found $TOTAL_VULNS security vulnerabilities"
        else
          echo "has-vulnerabilities=false" >> $GITHUB_OUTPUT
          echo "✅ No security vulnerabilities found"
        fi
        
    - name: Create security issue
      if: steps.security-check.outputs.has-vulnerabilities == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let safetyReport = [];
          let pipAuditReport = { vulnerabilities: [] };
          
          try {
            safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
          } catch (e) {
            console.log('No safety report found');
          }
          
          try {
            pipAuditReport = JSON.parse(fs.readFileSync('pip-audit-report.json', 'utf8'));
          } catch (e) {
            console.log('No pip-audit report found');
          }
          
          const totalVulns = safetyReport.length + pipAuditReport.vulnerabilities.length;
          
          const issueBody = `
          ## 🚨 Security Vulnerabilities Detected
          
          **Total Vulnerabilities**: ${totalVulns}
          
          ### Safety Report (${safetyReport.length} issues)
          ${safetyReport.map(vuln => `
          - **${vuln.advisory}**
            - Package: ${vuln.package_name}
            - Version: ${vuln.analyzed_version}
            - Severity: ${vuln.severity || 'Unknown'}
          `).join('')}
          
          ### Pip-Audit Report (${pipAuditReport.vulnerabilities.length} issues)
          ${pipAuditReport.vulnerabilities.map(vuln => `
          - **${vuln.id}**
            - Package: ${vuln.package}
            - Version: ${vuln.installed_version}
            - Severity: ${vuln.severity || 'Unknown'}
          `).join('')}
          
          ## Recommended Actions
          
          1. Review the vulnerabilities above
          2. Update affected packages to secure versions
          3. Run the dependency update workflow
          4. Test thoroughly after updates
          
          ## Automation
          
          This issue was automatically created by the security monitoring workflow.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Security Vulnerabilities Detected (${totalVulns} issues)`,
            body: issueBody,
            labels: ['security', 'automated-issue', 'vulnerability']
          });
          
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: weekly-security-reports
        path: |
          safety-report.json
          pip-audit-report.json
        retention-days: 90

  cleanup:
    name: Cleanup Old Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Delete old automated branches
      run: |
        # Delete merged automated dependency update branches older than 7 days
        git for-each-ref --format='%(refname:short) %(committerdate:unix)' refs/remotes/origin/automated-dependency-update* | \
        while read branch date; do
          if [ $(($(date +%s) - $date)) -gt 604800 ]; then  # 7 days in seconds
            echo "Deleting old branch: $branch"
            git push origin --delete "${branch#origin/}" || true
          fi
        done

  summary:
    name: Update Summary
    needs: [check-dependencies, update-dependencies, security-updates]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create summary
      run: |
        echo "## 🔄 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies Check: ${{ needs.check-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Updates Available: ${{ needs.check-dependencies.outputs.has-updates }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.update-dependencies.result }}" != "skipped" ]; then
          echo "- Dependency Updates: ${{ needs.update-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-updates.result }}" != "skipped" ]; then
          echo "- Security Updates: ${{ needs.security-updates.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.check-dependencies.outputs.has-updates }}" = "true" ]; then
          echo "✅ Dependency update PR created automatically" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No dependency updates needed" >> $GITHUB_STEP_SUMMARY
        fi