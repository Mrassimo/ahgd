name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

concurrency:
  group: quality-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install dependencies
      run: |
        uv sync --all-groups
        uv add --group dev ruff black mypy pylint flake8 isort radon
        
    - name: Lint with ruff (fast)
      run: |
        uv run ruff check src/ scripts/ tests/ --output-format=github
        uv run ruff format --check src/ scripts/ tests/
        
    - name: Lint with flake8 (comprehensive)
      run: uv run flake8 src/ scripts/ tests/ --format=github --statistics --tee --output-file=flake8-report.txt
      continue-on-error: true
      
    - name: Lint with pylint
      run: uv run pylint src/ scripts/ --output-format=text --reports=yes > pylint-report.txt || true
      
    - name: Check import sorting
      run: uv run isort --check-only --diff src/ scripts/ tests/
      
    - name: Code complexity analysis
      run: |
        uv run radon cc src/ scripts/ --min B --show-complexity --average > complexity-report.txt
        uv run radon mi src/ scripts/ --min B --show > maintainability-report.txt
        
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          pylint-report.txt
          complexity-report.txt
          maintainability-report.txt
        retention-days: 30

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install security tools
      run: |
        uv sync --all-groups
        uv add --group dev bandit safety semgrep pip-audit
        
    - name: Security scan with bandit
      run: |
        uv run bandit -r src/ scripts/ -f json -o bandit-report.json -ll
        uv run bandit -r src/ scripts/ -f txt -o bandit-report.txt -ll
      continue-on-error: true
      
    - name: Dependency vulnerability scan
      run: |
        uv run safety check --json --output safety-report.json || true
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        
    - name: Static analysis with semgrep
      run: |
        uv run semgrep --config=auto src/ scripts/ --json --output=semgrep-report.json || true
        
    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-reports
        path: |
          bandit-report.*
          safety-report.json
          pip-audit-report.json
          semgrep-report.json
        retention-days: 90

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, BSD-2-Clause, BSD-3-Clause, Apache-2.0, ISC, MPL-2.0

  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install documentation tools
      run: |
        uv sync --all-groups
        uv add --group dev pydocstyle doc8 sphinx sphinx-rtd-theme
        
    - name: Check docstring quality
      run: uv run pydocstyle src/ --convention=google
      continue-on-error: true
      
    - name: Check documentation formatting
      run: uv run doc8 docs/ --max-line-length=100
      continue-on-error: true
      
    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        uv run sphinx-apidoc -o docs/api src/
        uv run sphinx-build -b html docs/ docs/_build/
      continue-on-error: true
      
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: documentation-build
        path: docs/_build/
        retention-days: 30

  test-coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install dependencies
      run: uv sync --all-groups
      
    - name: Run tests with coverage
      run: |
        uv run pytest tests/ --cov=src --cov=scripts --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Coverage report
      run: |
        uv run coverage report --format=markdown > coverage-summary.md
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        cat coverage-summary.md >> $GITHUB_STEP_SUMMARY
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          coverage-summary.md
        retention-days: 30

  quality-gate:
    name: Quality Gate
    needs: [code-quality, security-scan, documentation-quality, test-coverage-analysis]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4
      
    - name: Quality gate evaluation
      run: |
        echo "## Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation: ${{ needs.documentation-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Analysis: ${{ needs.test-coverage-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        
        # Parse coverage report if available
        if [ -f coverage-reports/coverage-summary.md ]; then
          echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
          cat coverage-reports/coverage-summary.md >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for critical security issues
        if [ -f security-scan-reports/bandit-report.json ]; then
          HIGH_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' security-scan-reports/bandit-report.json)
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "❌ Found $HIGH_ISSUES high-severity security issues"
            exit 1
          fi
        fi
        
        # Quality gate decision
        if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "✅ Quality gate passed"
        else
          echo "❌ Quality gate failed"
          exit 1
        fi