[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ahgd-etl"
version = "1.0.0"
description = "Australian Health Geography Data repository with robust ETL pipeline"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "AHGD Development Team", email = "contact@ahgd-project.org"},
]
maintainers = [
    {name = "AHGD Development Team", email = "contact@ahgd-project.org"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: GIS",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
keywords = ["health", "geography", "australia", "data", "etl", "pipeline"]
requires-python = ">=3.8"
dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "requests>=2.25.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "semver>=3.0.0",
    "python-dateutil>=2.8.0"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.900",
    "pre-commit>=2.15.0",
    "isort>=5.10.0",
    "jsonschema>=4.17.0",
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
    "scipy>=1.9.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autoapi>=1.8.0",
    "myst-parser>=0.18.0",
]
analysis = [
    "jupyter>=1.0.0",
    "geopandas>=0.10.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]
geo = [
    "geopandas>=0.10.0",
    "shapely>=1.8.0",
    "fiona>=1.8.0",
    "pyproj>=3.2.0",
]

[project.urls]
"Homepage" = "https://github.com/your-org/ahgd"
"Bug Reports" = "https://github.com/your-org/ahgd/issues"
"Source" = "https://github.com/your-org/ahgd"
"Documentation" = "https://your-org.github.io/ahgd"

[project.scripts]
ahgd-etl = "main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.csv"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "tests"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: mark test as a unit test",
    "integration: mark test as an integration test",
    "performance: mark test as a performance test",
    "slow: mark test as slow running",
    "database: mark test as requiring database",
    "external: mark test as requiring external resources",
    "memory_intensive: mark test as memory intensive",
    "target_schema: mark test as target schema compliance test",
    "data_quality: mark test as data quality standards test",
    "target_outputs: mark test as target output format test",
    "pipeline_performance: mark test as pipeline performance test",
    "tdd: mark test as Test-Driven Development test",
    "australian_standards: mark test as Australian standards compliance test",
    "concurrent: mark test as concurrent processing test",
    "export_validation: mark test as export format validation test",
    "memory_constraint: mark test as memory usage constraint test",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "except ImportError:",
]

[tool.coverage.html]
directory = "htmlcov"
title = "AHGD Test Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"