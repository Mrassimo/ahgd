[project]
name = "ahgd"
version = "0.1.0"
description = "Australian Health Geography Data Analytics"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "altair>=5.5.0",
    "duckdb>=1.3.1",
    "folium>=0.20.0",
    "geopandas>=1.1.0",
    "httpx>=0.28.1",
    "pandas>=2.0.0",
    "plotly>=5.20.0",
    "polars[all]>=1.30.0",
    "rich>=13.9.4",
    "streamlit>=1.45.1",
    "streamlit-folium>=0.15.0",
    "typer>=0.16.0",
    # Performance monitoring dependencies
    "psutil>=5.9.0",
    "requests>=2.31.0",
    "redis>=5.0.0",
    # Advanced analytics dependencies
    "jupyter>=1.0.0",
    "scikit-learn>=1.4.0",
    "scipy>=1.12.0",
    "numpy>=1.26.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "statsmodels>=0.14.0",
    "xgboost>=2.0.0",
    "lightgbm>=4.3.0",
    "networkx>=3.2.0",
    "pymc>=5.10.0",
    "arviz>=0.17.0",
    "pingouin>=0.5.4",
    "lifelines>=0.27.8",
    "yellowbrick>=1.5",
    "shap>=0.44.0",
    "lime>=0.2.0.1",
    "optuna>=3.5.0",
    "prophet>=1.1.5",
    "geopy>=2.4.1",
    "contextily>=1.5.0",
    "rasterio>=1.3.9",
    "pysal>=24.1",
    "esda>=2.5.1",
    "splot>=1.1.5.post1",
    "libpysal>=4.9.2",
    # Data versioning and pipeline management
    "dvc[s3,ssh]>=3.40.0",
    "dvclive>=3.40.0",
    # Modern data engineering stack
    "dlt[duckdb,filesystem]>=1.5.0",
    "dbt-duckdb>=1.8.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "sqlalchemy>=2.0.0",
    "jinja2>=3.1.0",
    # Enhanced data processing
    "pyarrow>=18.0.0",
    "fsspec>=2024.10.0",
]

[dependency-groups]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.100.0",
    "factory-boy>=3.3.0",
    "selenium>=4.15.0",
    "pytest-xvfb>=3.0.0",
]

dev = [
    # Code quality and formatting
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",

    # Security scanning
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
    "semgrep>=1.45.0",

    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autoapi>=3.0.0",
    "myst-parser>=2.0.0",
    "furo>=2023.9.10",
    "sphinx-autobuild>=2021.3.14",
    "pdoc3>=0.10.0",
    "pydoc-markdown>=4.8.0",
    "pydocstyle>=6.3.0",
    "doc8>=1.1.0",
    "codespell>=2.2.0",

    # Code analysis
    "pylint>=3.0.0",
    "flake8>=6.0.0",
    "radon>=6.0.0",

    # Build and deployment
    "build>=1.0.0",
    "twine>=4.0.0",
    "wheel>=0.42.0",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=scripts",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=40",
    "-ra",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests that may take longer to run",
    "database: Tests that require database access",
    "network: Tests that require network access",
]

[tool.coverage.run]
source = ["src", "scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "COM", # flake8-commas
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (covered by line-length)
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert
    "T201",  # print statements (allowed in scripts)
    "COM812", # trailing comma (handled by formatter)
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "htmlcov",
    "data",
    "logs",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002"]
"scripts/*" = ["T201", "S101"]

[tool.ruff.isort]
known-first-party = ["src", "scripts"]
force-single-line = true

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | htmlcov
  | data
  | logs
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "geopandas.*",
    "folium.*",
    "streamlit.*",
    "plotly.*",
    "altair.*",
    "polars.*",
    "duckdb.*",
]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "htmlcov", "data", "logs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for test files

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src", "scripts"]
force_single_line = true
