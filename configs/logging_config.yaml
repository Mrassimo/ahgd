# AHGD Logging Configuration
# Comprehensive logging setup for different environments
# Integrated with AHGD Configuration Management System

config_version: "2.0.0"
last_updated: "2025-06-20"

# Integration with main configuration system
integration:
  config_manager_compatible: true
  supports_hot_reload: true
  environment_aware: true
  secrets_enabled: true

# Development Environment Configuration
development:
  log_level: DEBUG
  log_dir: logs/dev
  max_file_size: 50 MB
  backup_count: 3
  json_logs: true
  console_logs: true
  performance_logging: true
  lineage_tracking: true
  compression: gz
  
  formats:
    console: "{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} | {message}"
    file: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} | {message}"
    json: "{message}"
  
  # Specific log files for different components
  log_files:
    etl:
      path: logs/dev/etl
      levels: [DEBUG, INFO, WARNING, ERROR, CRITICAL]
      rotation: 25 MB
      retention: 5
    validation:
      path: logs/dev/validation
      levels: [INFO, WARNING, ERROR, CRITICAL]
      rotation: 25 MB
      retention: 5
    errors:
      path: logs/dev/errors
      levels: [ERROR, CRITICAL]
      rotation: 10 MB
      retention: 10
    performance:
      path: logs/dev/performance
      levels: [INFO, WARNING]
      rotation: 25 MB
      retention: 3
    lineage:
      path: logs/dev/lineage
      levels: [INFO]
      rotation: 25 MB
      retention: 7

# Production Environment Configuration
production:
  log_level: INFO
  log_dir: logs/prod
  max_file_size: 100 MB
  backup_count: 10
  json_logs: true
  console_logs: false
  performance_logging: true
  lineage_tracking: true
  compression: gz
  
  formats:
    console: "{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}"
    file: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} | {message}"
    json: "{message}"
  
  log_files:
    etl:
      path: logs/prod/etl
      levels: [INFO, WARNING, ERROR, CRITICAL]
      rotation: 100 MB
      retention: 30
    validation:
      path: logs/prod/validation
      levels: [INFO, WARNING, ERROR, CRITICAL]
      rotation: 50 MB
      retention: 30
    errors:
      path: logs/prod/errors
      levels: [ERROR, CRITICAL]
      rotation: 50 MB
      retention: 90
    performance:
      path: logs/prod/performance
      levels: [INFO, WARNING]
      rotation: 50 MB
      retention: 14
    lineage:
      path: logs/prod/lineage
      levels: [INFO]
      rotation: 100 MB
      retention: 365
    audit:
      path: logs/prod/audit
      levels: [INFO, WARNING, ERROR, CRITICAL]
      rotation: 100 MB
      retention: 2555  # 7 years for compliance

# Testing Environment Configuration
testing:
  log_level: WARNING
  log_dir: logs/test
  max_file_size: 10 MB
  backup_count: 2
  json_logs: true
  console_logs: true
  performance_logging: false
  lineage_tracking: false
  compression: gz
  
  formats:
    console: "{time:HH:mm:ss} | {level: <8} | {message}"
    file: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} | {message}"
    json: "{message}"
  
  log_files:
    test:
      path: logs/test/test
      levels: [WARNING, ERROR, CRITICAL]
      rotation: 10 MB
      retention: 1

# Staging Environment Configuration
staging:
  log_level: DEBUG
  log_dir: logs/staging
  max_file_size: 75 MB
  backup_count: 7
  json_logs: true
  console_logs: true
  performance_logging: true
  lineage_tracking: true
  compression: gz
  
  formats:
    console: "{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} | {message}"
    file: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} | {message}"
    json: "{message}"
  
  log_files:
    etl:
      path: logs/staging/etl
      levels: [DEBUG, INFO, WARNING, ERROR, CRITICAL]
      rotation: 50 MB
      retention: 7
    validation:
      path: logs/staging/validation
      levels: [INFO, WARNING, ERROR, CRITICAL]
      rotation: 25 MB
      retention: 7
    errors:
      path: logs/staging/errors
      levels: [ERROR, CRITICAL]
      rotation: 25 MB
      retention: 14
    performance:
      path: logs/staging/performance
      levels: [INFO, WARNING]
      rotation: 25 MB
      retention: 7
    lineage:
      path: logs/staging/lineage
      levels: [INFO]
      rotation: 50 MB
      retention: 14

# Monitoring and Alerting Configuration
monitoring:
  enabled: true
  interval_seconds: 60
  metrics_retention_hours: 168  # 1 week
  
  # System resource thresholds
  alerts:
    high_cpu:
      enabled: true
      threshold: 80.0
      severity: high
      cooldown_minutes: 5
    high_memory:
      enabled: true
      threshold: 85.0
      severity: high
      cooldown_minutes: 5
    low_disk_space:
      enabled: true
      threshold: 90.0
      severity: critical
      cooldown_minutes: 15
    high_load:
      enabled: true
      threshold: 4.0
      severity: medium
      cooldown_minutes: 10
    error_rate:
      enabled: true
      threshold: 10  # errors per hour
      severity: high
      cooldown_minutes: 30
  
  # Notification settings (with secrets integration)
  notifications:
    email:
      enabled: false
      smtp_server: "${secret:smtp_server}"
      smtp_port: 587
      use_tls: true
      username: "${secret:smtp_username}"
      password: "${secret:smtp_password}"
      from: "${env:AHGD_ALERT_EMAIL_FROM}"
      to:
        - "${secret:admin_email}"
        - "${secret:devops_email}"
    
    webhook:
      enabled: false
      url: "${secret:alert_webhook_url}"
      headers:
        Content-Type: application/json
        Authorization: "Bearer ${secret:webhook_auth_token}"
    
    slack:
      enabled: false
      webhook_url: "${secret:slack_webhook_url}"
      channel: "${env:AHGD_SLACK_CHANNEL}"

# Health Check Configuration
health_checks:
  enabled: true
  interval_seconds: 300  # 5 minutes
  timeout_seconds: 30
  
  checks:
    database:
      enabled: true
      description: "Database connection health"
      timeout: 10
    
    file_system:
      enabled: true
      description: "File system access check"
      timeout: 5
      paths:
        - logs
        - data_raw
        - data_processed
    
    external_services:
      enabled: false
      description: "External service availability"
      timeout: 30
      urls: []
    
    data_pipeline:
      enabled: true
      description: "Data pipeline component health"
      timeout: 60

# Log Sampling Configuration (for high-volume production)
sampling:
  enabled: false
  rules:
    - level: DEBUG
      sample_rate: 0.01  # Sample 1% of DEBUG logs
    - level: INFO
      sample_rate: 0.1   # Sample 10% of INFO logs
    - level: WARNING
      sample_rate: 1.0   # Keep all WARNING logs
    - level: ERROR
      sample_rate: 1.0   # Keep all ERROR logs
    - level: CRITICAL
      sample_rate: 1.0   # Keep all CRITICAL logs

# Log Enrichment Settings
enrichment:
  enabled: true
  include_hostname: true
  include_process_info: true
  include_thread_info: true
  include_git_info: false  # Git commit hash, branch info
  include_environment_vars:
    - AHGD_ENV
    - AHGD_VERSION
    - DEPLOYMENT_ID

# Security and Privacy Settings
security:
  # Sensitive data masking
  mask_sensitive_data: true
  sensitive_patterns:
    - "password"
    - "token"
    - "api_key"
    - "secret"
    - "ssn"
    - "credit_card"
  
  # PII detection and masking
  mask_pii: true
  pii_patterns:
    - "email"
    - "phone"
    - "address"
    - "name"
  
  # Log encryption (for compliance)
  encrypt_logs: false
  encryption_key_path: /etc/ahgd/log_encryption.key

# Performance Settings
performance:
  # Async logging for better performance
  async_logging: true
  queue_size: 10000
  
  # Batch processing
  batch_size: 100
  flush_interval: 5  # seconds
  
  # Memory management
  max_memory_usage: 100  # MB
  cleanup_interval: 3600  # seconds

# Integration Settings
integrations:
  # ELK Stack integration
  elasticsearch:
    enabled: false
    hosts:
      - localhost:9200
    index_pattern: ahgd-logs-{date}
    
  # Prometheus metrics
  prometheus:
    enabled: false
    port: 8000
    path: /metrics
    
  # OpenTelemetry tracing
  opentelemetry:
    enabled: false
    endpoint: http://localhost:4317
    service_name: ahgd
    
  # Grafana dashboard
  grafana:
    enabled: false
    dashboard_url: "${env:GRAFANA_DASHBOARD_URL}"
    api_key: "${secret:grafana_api_key}"

# =============================================================================
# CONFIGURATION MANAGEMENT INTEGRATION
# =============================================================================

# This section documents integration with the AHGD Configuration Management System
configuration_integration:
  # Secrets resolution - use ${secret:key_name} format
  secrets_examples:
    - "${secret:smtp_password}"        # SMTP password for email notifications
    - "${secret:slack_webhook_url}"    # Slack webhook URL for alerts
    - "${secret:webhook_auth_token}"   # Authentication token for webhook
    - "${secret:grafana_api_key}"      # Grafana API key for dashboard integration
  
  # Environment variable resolution - use ${env:VAR_NAME} format
  environment_examples:
    - "${env:AHGD_ALERT_EMAIL_FROM}"   # Alert sender email from environment
    - "${env:AHGD_SLACK_CHANNEL}"      # Slack channel from environment
    - "${env:GRAFANA_DASHBOARD_URL}"   # Grafana dashboard URL from environment
  
  # Configuration loading order (highest to lowest priority):
  # 1. Environment variables (AHGD_* prefix)
  # 2. local.yaml (git-ignored, for local overrides)
  # 3. {environment}.yaml (development.yaml, production.yaml, etc.)
  # 4. default.yaml (base configuration)
  # 5. logging_config.yaml (this file, loaded via dedicated config)
  
  # Hot-reload support:
  # - File system watching is enabled in development environment
  # - Configuration changes are automatically detected and applied
  # - Logging configuration can be reloaded without restart
  
  # Environment-specific behavior:
  # - Development: Enhanced logging, debug output, console logging
  # - Staging: Production-like but with more verbose logging
  # - Production: Minimal logging, structured output, external integrations
  # - Testing: Minimal logging, mock integrations, fast execution
  
  # Usage with configuration manager:
  # from src.utils.config import get_config_manager
  # config_manager = get_config_manager()
  # logging_config = config_manager.get_section('logging')
  # 
  # Or use the existing logging config loader:
  # from src.utils.config_loader import setup_environment_logging
  # logger = setup_environment_logging()

# Configuration validation:
# This file should conform to the logging configuration schema
# defined in schemas/config_schema.yaml for consistency and validation